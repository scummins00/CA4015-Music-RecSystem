Traceback (most recent call last):
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "c:\program files\python38\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\Users\seanc\AppData\Roaming\Python\Python38\site-packages\nbclient\client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Basic retrieval model
    def __init__(self, user_model, item_model):
        super().__init__()

        ### we pass the embedding layer into item model
        self.item_model: tf.keras.Model = item_model
            
        ### We pass the embedding layer into user model
        self.user_model: tf.keras.Model = user_model
        
        ### for retrieval model. we take top-k accuracy as metrics
        metrics = tfrs.metrics.FactorizedTopK(candidates=items.batch(128).map(item_model))
        
        # define the task, which is retrieval                                        
        task = tfrs.tasks.Retrieval(metrics=metrics)
        self.task: tf.keras.layers.Layer = task

    def compute_loss(self, features: Dict[Text, tf.Tensor], training=False) -> tf.Tensor:
        # We pick out the user features and pass them into the user model.
        user_embeddings = self.user_model(features["userID"])
        # And pick out the item features and pass them into the item model,
        # getting embeddings back.
        positive_item_embeddings = self.item_model(features["artistID"])

        # The task computes the loss and the metrics.
        return self.task(user_embeddings, positive_item_embeddings)
------------------

[1;36m  File [1;32m"C:\Users\seanc\AppData\Local\Temp/ipykernel_1744/2244004975.py"[1;36m, line [1;32m2[0m
[1;33m    def __init__(self, user_model, item_model):[0m
[1;37m    ^[0m
[1;31mIndentationError[0m[1;31m:[0m unexpected indent

IndentationError: unexpected indent (Temp/ipykernel_1744/2244004975.py, line 2)

